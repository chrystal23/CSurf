// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tlasso1
Rcpp::List tlasso1(const arma::mat& x, const arma::vec& y, const arma::vec& q, double s, const arma::vec& grid_tau);
RcppExport SEXP _CSurf_tlasso1(SEXP xSEXP, SEXP ySEXP, SEXP qSEXP, SEXP sSEXP, SEXP grid_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grid_tau(grid_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(tlasso1(x, y, q, s, grid_tau));
    return rcpp_result_gen;
END_RCPP
}
// ConstructBasis
arma::mat ConstructBasis(const arma::vec& x, const int m);
RcppExport SEXP _CSurf_ConstructBasis(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ConstructBasis(x, m));
    return rcpp_result_gen;
END_RCPP
}
// ncvxGroupReg
Rcpp::List ncvxGroupReg(arma::mat X, const arma::vec& Y, const arma::vec& group, const int G, double lambda, std::string penalty, const double phi0, const double gamma, const double epsilon_c, const double epsilon_t, const int iteMax, const bool intercept, const bool itcpIncluded);
RcppExport SEXP _CSurf_ncvxGroupReg(SEXP XSEXP, SEXP YSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP phi0SEXP, SEXP gammaSEXP, SEXP epsilon_cSEXP, SEXP epsilon_tSEXP, SEXP iteMaxSEXP, SEXP interceptSEXP, SEXP itcpIncludedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_c(epsilon_cSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_t(epsilon_tSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type itcpIncluded(itcpIncludedSEXP);
    rcpp_result_gen = Rcpp::wrap(ncvxGroupReg(X, Y, group, G, lambda, penalty, phi0, gamma, epsilon_c, epsilon_t, iteMax, intercept, itcpIncluded));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CSurf_tlasso1", (DL_FUNC) &_CSurf_tlasso1, 5},
    {"_CSurf_ConstructBasis", (DL_FUNC) &_CSurf_ConstructBasis, 2},
    {"_CSurf_ncvxGroupReg", (DL_FUNC) &_CSurf_ncvxGroupReg, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_CSurf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
